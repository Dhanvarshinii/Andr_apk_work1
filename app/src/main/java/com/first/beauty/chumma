package com.first.beauty

import android.os.Bundle
import android.widget.PopupMenu
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.activity.enableEdgeToEdge
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.expandVertically
import androidx.compose.animation.slideInVertically
import androidx.compose.animation.slideOutVertically
import androidx.compose.foundation.background
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.ui.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.first.beauty.ui.theme.SchÃ¶neTheme
import androidx.compose.ui.unit.dp
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.unit.IntOffset
import androidx.compose.ui.unit.IntSize
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import javax.net.ssl.SSLEngineResult.Status
import androidx.compose.material3.Text
import androidx.compose.ui.layout.LayoutCoordinates
import androidx.compose.ui.layout.boundsInWindow
import androidx.compose.ui.zIndex
import androidx.compose.ui.layout.onGloballyPositioned
import kotlin.math.roundToInt
import androidx.compose.ui.geometry.Rect
import com.google.accompanist.pager.*
import java.time.LocalDate
import java.time.format.DateTimeFormatter


//Don't change this
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MyApp()
        }
    }
}



// This is for the tab button below
@Composable
fun MyApp() {
    var selectedTab by remember { mutableStateOf(1) } // Starting page number

    Scaffold(
        bottomBar = { BottomNavBar(selectedTab) { selectedTab = it } }
    ) { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            when (selectedTab) {
                0 -> HomeScreen()
                1 -> RoutineScreen()
                2 -> ConcernsScreen()
                3 -> ChallengesScreen()
            }
        }
    }
}



// Start putting your code here.

// Home Screen [1]
@Composable
fun HomeScreen() {
    // Content for the Home tab
    // List of daily status cards
    val statusList = listOf(
        "Feeling great today! Your skin is glowing.",
        "Tired, but your beauty routine helped you feel refreshed.",
        "It's a good day for a skincare mask!",
        "You're looking fabulous as always!",
    )

    // LazyColumn for scrollable status boxes
    LazyColumn(modifier = Modifier.padding(25.dp)) {
        items(statusList.size) { index ->
            StatusCard(status = statusList[index])
        }
    }
}

// Home page - cards
@Composable
fun StatusCard(status: String) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(bottom = 15.dp),
        shape = RoundedCornerShape(8.dp),
        elevation = CardDefaults.elevatedCardElevation(defaultElevation = 6.dp)

    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Text(
                text = "Summary",
                style = MaterialTheme.typography.bodyMedium,
                color = Color.Black,
                modifier = Modifier.padding(bottom = 8.dp)
            )
            Text(
                text = status,
                style = MaterialTheme.typography.bodySmall,
                color = Color.Gray
            )
            Spacer(modifier = Modifier.height(8.dp))
            Button(
                onClick = { /* Handle click, maybe navigate to another screen */ },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(text = "View Details")
            }
        }
    }
}





// Routine screen [2]
@Composable
fun RoutineScreen() {
    // Create the pager state to manage page changes
    var expanded by remember { mutableStateOf(false) }  // Track if the dropdown is visible
    var fabBounds by remember { mutableStateOf(Rect.Zero) }

    // Content for the Routine tab with FAB
    Box(modifier = Modifier.fillMaxSize())
    {
        // Add the floating action button (FAB)
        FloatingActionButton(
            onClick = { expanded = !expanded },
            modifier = Modifier
                .align(Alignment.BottomEnd)
                .padding(16.dp)
                .onGloballyPositioned { layoutCoordinates ->
                    fabBounds = layoutCoordinates.boundsInWindow()
                }
        ) {
            Icon(Icons.Filled.Add, contentDescription = "Add")
        }

        // Dropdown menu above the FAB
        AnimatedVisibility(
            visible = expanded,
            enter = slideInVertically(initialOffsetY = { 40 }) + expandVertically(),
            exit = slideOutVertically(targetOffsetY = { 40 }),
            modifier = Modifier
                .align(Alignment.BottomEnd)
                .padding(bottom = 90.dp) // Adjust this to position above the FAB
        ) {
            Column(
                modifier = Modifier
                    .background(Color.White)
                    .padding(8.dp)
                    .width(200.dp)
            ) {
                DropdownItem(text = "Option 1")
                DropdownItem(text = "Option 2")
                DropdownItem(text = "Option 3")
            }
        }
        // Routine screen content goes here (you can modify the content as needed)
        Text(text = "Enter your routine here", modifier = Modifier.padding(16.dp))
    }
}

@Composable
fun DropdownItem(text: String) {
    Text(
        text = text,
        modifier = Modifier
            .fillMaxWidth()
            .padding(12.dp)
            .background(Color.LightGray)
            .padding(8.dp),
        color = Color.Black
    )
}









// ConcernScreen [3]
@Composable
fun ConcernsScreen() {
    // Content for the Search tab
    Text(text = "Have Concerns?")
}









// ChallengeScreen [4]
@Composable
fun ChallengesScreen() {
    // Content for the Search tab
    Text(text = "Ready for a Challenge?")
}











//Navigation number
@Composable
fun BottomNavBar(selectedTab: Int, onTabSelected: (Int) -> Unit) {
    NavigationBar(
        containerColor = Color.White,
        contentColor = Color.Black
    ) {
        NavigationBarItem(
            icon = { Icon(painter = painterResource(id = R.drawable.ic_launcher_foreground), contentDescription = "Home") },
            label = { Text("Home") },
            selected = selectedTab == 0,
            onClick = { onTabSelected(0) }
        )
        NavigationBarItem(
            icon = { Icon(painter = painterResource(id = R.drawable.ic_launcher_foreground), contentDescription = "Search") },
            label = { Text("Routine") },
            selected = selectedTab == 1,
            onClick = { onTabSelected(1) }
        )
        NavigationBarItem(
            icon = { Icon(painter = painterResource(id = R.drawable.ic_launcher_foreground), contentDescription = "Profile") },
            label = { Text("Concerns") },
            selected = selectedTab == 2,
            onClick = { onTabSelected(2) }
        )
        NavigationBarItem(
            icon = { Icon(painter = painterResource(id = R.drawable.ic_launcher_foreground), contentDescription = "Search") },
            label = { Text("Challenges") },
            selected = selectedTab == 3,
            onClick = { onTabSelected(3) }
        )
    }
}


@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    MyApp()
}